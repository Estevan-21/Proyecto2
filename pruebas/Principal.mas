
/ Entrada en decimal
INPUT
Store X1
INPUT
Store Y1
INPUT
Store X2
INPUT
Store Y2
INPUT
Store X3
INPUT
Store Y3

/ INICIO
		Load X1
		Store A
		Load X2
		Store B
		Load X3
		Store C
		Jump ccomp1
comp1,	Load Y1
		Store A
		Load Y2
		Store B
		Load Y3
		Store C
		Jump ccomp1
/ Comprobar potencias
cc,		Load X1
		Store W
		Load Y1
		Store Z
		Jns pote
		Jump end

        

/ COMPROBAR Colineal, si en la salida hay un -1 al final indica que hay algun punto colineal y no es un triangulo, si si es un triangulo tiene como salida la potencia de X1 a la Y1
ccomp1,	Load count1
		Add one
        Store count1
		Load A
		Subt B
		Skipcond 400
        Jump ab
do,		Load A
		Subt C
		Skipcond 400
        jump ab	
tr,		Load B
		Subt C
		Skipcond 400      
        Jump ab
		Jump cancel
ab,		Load count1
		Subt tree
        Skipcond 0
		Jump cc
        Jump comp1

/ DIVISION, divide X sobre Y 
div,	DEC 0
		Clear
		Store count
dloop,	Load X
		Subt Y
        Skipcond 400
        Jump con
        Add one
con,	Skipcond 800
		JumpI div
		Store X
		Load count
		Add one
		Store count
		Jump dloop


// POTENCIA, W es la base y Z es el exponente
pote,   DEC 0
		Load W
		Store X
        Store num
		Subt one
        Store Y
        Load Z
        Subt one
		Store Z
ploop,	Load num
		Store X
        Jns mloop
cont,   Load W
		Subt one
        Store Y
		
		Load Z
        Subt one
        Store Z

        Skipcond 400
        Jump ploop
        JumpI pote

/ MULTIPLICACION, multiplica X por Y
mloop,  dec 0 
mult,	Load num
        Add X
        Store num

        Load Y
        Subt one
        Store Y

        Skipcond 400 / have we completed the multiplication?
        Jump mult / no; repeat loop
		JumpI mloop

//RAIZ: Saca la ra√≠z de lo que haya en el acumulador
		// division por 2
		Store X
		Load dos
		Store Y
		JnS div
        Load count
	 	Store b
	 	// res^2
	 	Load b
		Store X
		Store Y
		JnS mult
        Load num
		Store c        
loop,	Load c
		Subt a
		Skipcond 800
		Jump loop2
		Load b
		Store X
		JnS div
		Load count
		Store b
		Store X
		Store Y
		JnS mult
        Load num
		Store c
        Load b      
		Jump loop
loop2,	Load c
		Subt a
		Skipcond 0
		Jump end
		Load b
		Add one
		Store b
		Store b
		Store X
		Store Y
		JnS mult
        Load num
		Store c
		Jump loop2
		

/ Salida
end,	Load num
		Output
		Jump fin
cancel, Load neg
		Output		
fin,	Halt
        
W,	DEC 0
X,	DEC 0
Y,	DEC 0
Z,	DEC 0
X1, DEC 0
X2, DEC 0
X3, DEC 0
Y1, DEC 0
Y2, DEC 0
Y3, DEC 0
num,	DEC 0
one,	DEC 1
dos,	DEC 2
tree,	DEC 2
A,	DEC 0
B,	DEC 0
C,	DEC 0
a,	DEC 0
b,	DEC 0
c,	DEC 0
neg,	Dec -1
count,	DEC 0
count1,	DEC 0