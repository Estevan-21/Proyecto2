
/ Entrada en decimal
INPUT
Store X1
INPUT
Store Y1
INPUT
Store X2
INPUT
Store Y2
INPUT
Store X3
INPUT
Store Y3

/ INICIO
		Load X1
		Store A
		Load X2
		Store B
		Load X3
		Store C
		Jump ccomp1
comp1,	Load Y1
		Store A
		Load Y2
		Store B
		Load Y3
		Store C
		Jump ccomp1
/ Comprobar potencias
/cc,		Jump end

/ COMPROBAR Colineal, si en la salida hay un -1 al final indica que hay algun punto colineal y no es un triangulo, si si es un triangulo tiene como salida la potencia de X1 a la Y1
ccomp1,	Load count1
		Add one
        Store count1
		Load A
		Subt B
		Skipcond 400
        Jump ab
do,		Load A
		Subt C
		Skipcond 400
        Jump ab	
tr,		Load B
		Subt C
		Skipcond 400      
        Jump ab
		Jump cancel
ab,		Load count1
		Subt tree
        Skipcond 0
		Jump ccomp2
        Jump comp1

ccomp2,	Load X2
		Subt X1
		Store valAbs
		Jns abs
		Load valAbs
		Store Xmult 
		Store Ymult
		JnS mult
		Load num
		Store temp

		Load Y2
		Subt Y1
		Store valAbs
		Jns abs
		Load valAbs
		Store Xmult 
		Store Ymult
		JnS mult
		Load num
		Add temp
		Store a
		JnS raiz
		Load b
		Store ladoA
		Output

		Load X2
		Subt X3
		Store valAbs
		Jns abs
		Load valAbs
		Store Xmult 
		Store Ymult
		JnS mult
		Load num
		Store temp

		Load Y2
		Subt Y3
		Store valAbs
		Jns abs
		Load valAbs
		Store Xmult 
		Store Ymult
		JnS mult
		Load num
		Add temp
		Store a
		Store Xdiv
		JnS raiz
		Load b
		Store ladoB
		Output

		Load X3
		Subt X1
		Store valAbs
		Jns abs
		Load valAbs
		Store Xmult 
		Store Ymult
		JnS mult
		Load num
		Store temp

		Load Y3
		Subt Y1
		Store valAbs
		Jns abs
		Load valAbs
		Store Xmult 
		Store Ymult
		JnS mult
		Load num
		Add temp
		Store a
		Store Xdiv
		JnS raiz
		Load b
		Store ladoC
		Output
		Jump comp11

comp11,		Load	 ladoA
		Subt	 ladoB
		Skipcond 800
		Jump 	 comp21
		Jump 	 comp12
comp12,		Load 	 ladoA
		Subt	 ladoC
		Skipcond 800
		Jump	 comp21
		Jump	 comp13
comp13,		Load 	 ladoB
		Add	 ladoC
		Subt	 ladoA
		Skipcond 400
		Jump 	 comp21
		Jump	 noes // false
comp21,		Load	 ladoB
		Subt	 ladoA
		Skipcond 800
		Jump 	 comp31
		Jump 	 comp22
comp22,		Load 	 ladoB
		Subt	 ladoC
		Skipcond 800
		Jump	 comp31
		Jump	 comp23
comp23,		Load 	 ladoA
		Add	 ladoC
		Subt	 ladoB
		Skipcond 400
		Jump 	 comp31
		Jump	 noes // false
comp31,		Load	 ladoC
		Subt	 ladoB
		Skipcond 800
		Jump 	 sies
		Jump 	 comp32
comp32,		Load 	 ladoC
		Subt	 ladoA
		Skipcond 800
		Jump	 sies
		Jump	 comp33
comp33,		Load 	 ladoA
		Add	 	 ladoB
		Subt	 ladoC
		Skipcond 400
		Jump 	 sies
		Jump	 noes // false
noes,	Jump cancel
sies, 	Jump Area

/ DIVISION, divide X sobre Y 
div,	DEC 0
		Clear
		Store count
dloop,	Load Xdiv
		Subt Ydiv
        Skipcond 400
        Jump con
        Add one
con,	Skipcond 800
		JumpI div
		Store Xdiv
		Load count
		Add one
		Store count
		Jump dloop


// POTENCIA, W es la base y Z es el exponente
pote,   DEC 0
        Load W
        Store Xmult
        Store num
        Store Ymult
        Load Z
        Subt one
        Store Z
ploop,  Load num
        Store Xmult
        JnS mult
        Load W
        Store Ymult
                
        Load Z
        Subt one
        Store Z

        Skipcond 400
        Jump ploop
        JumpI pote

/ MULTIPLICACION, multiplica X por Y
mult,   DEC 0
        Clear
        Store num
mloop,  Load num
        Add Xmult
        Store num

        Load Ymult
        Skipcond 400
        Subt one
        Store Ymult

        Skipcond 400 / have we completed the multiplication?
        Jump mloop / no; repeat loop
        JumpI mult

//RAIZ: Saca la raiz de lo que haya en el acumulador
		// division por 2
raiz,	DEC 0
		Store Xdiv
		Load dos
		Store Ydiv
		JnS div
	    Load count
		Store b
		// res^2
		Load b
		Store Xmult
		Store Ymult
		JnS mult
	    Load num
		Store c        
loop,	Load c
		Subt a
		Skipcond 800
		Jump loop2
		Load b
		Store Xdiv
		JnS div
		Load count
		Store b
		Store Xmult
		Store Ymult
		JnS mult
        Load num
		Store c
        Load b      
		Jump loop
loop2,	Load c
		Subt a
		Skipcond 0
		JumpI raiz // fin
		Load b
		Add one
		Store b
		Store Xmult
		Store Ymult
		JnS mult
        Load num
		Store c
		Jump loop2

abs,	DEC 0
		Load valAbs
		Skipcond 0
		JumpI abs
		Clear
		Subt valAbs
		Store valAbs
		JumpI abs

// AREA
Area,	Load Y2
		Subt Y3
		Skipcond 0
		Jump ba		
        Store valAbs
        Load n1
		Add neg
		Store n1
		Jns abs
		Load valAbs	
ba,		Store F
		Load X1
		Store Xmult
		Load F
		Store Ymult
		Jns mult
		Load num
		Store G        
		Load Y3
		Subt Y1
		Skipcond 0
		Jump bb
        Store valAbs
        Load n2
		Add neg
		Store n2
		Jns abs
		Load valAbs
bb,		Store H		
		Load X2
		Store Xmult
		Load H
		Store Ymult 
		Jns mult
		Load num
		Store I          
		Load Y1
		Subt Y2
		Skipcond 0
		Jump bc
        Store valAbs
        Load n3
		Add neg
		Store n3
		Jns abs
		Load valAbs
bc,		Store J
		Load X3
		Store Xmult
		Load J
		Store Ymult    
		Jns mult
		Load num
		Store K        

// Terminan asignaciones       
		Load n1
		Skipcond 0
		Jump ca
		Load G
		Store p
 		Load G
		Clear
		Subt p
		Store G	     
ca,		Load n2
		Skipcond 0
		Jump cb
		Load I
		Store p
 		Load I
		Clear
		Subt p
		Store I	       
cb,		Load n3
		Skipcond 0
		Jump cc
		Load K
		Store p
 		Load K
		Clear
		Subt p
		Store K	
                       
cc,		Load G
		Add I
		Store G        
		Load G
		Add K
		Store G       
		Load G
		Store valAbs
		Jns abs
		Load valAbs
		Store G        
		Load G
		Store Xdiv
		Load dos
		Store Ydiv
		Jns div
		Load count
		Store area         

perim,	Load ladoA
		Add ladoB
		Add ladoC
		Store perimetro
		Jump end
		
/ Salida
end,	Load area
		Output
		Load perimetro
		Output
		Jump fin
cancel, Load neg	
fin,	Halt
        
W,	DEC 0
X,	DEC 0
Y,	DEC 0
Z,	DEC 0
X1, DEC 0
X2, DEC 0
X3, DEC 0
Y1, DEC 0
Y2, DEC 0
Y3, DEC 0
Xmult,	DEC 0
Ymult,	DEC 0
Xdiv,	DEC 0
Ydiv,	DEC 0
ladoA,	DEC 0
ladoB,	DEC 0
ladoC,	DEC 0
num,	DEC 0
cero,	DEC 0
one,	DEC 1
dos,	DEC 2
tree,	DEC 3
A,	DEC 0
B,	DEC 0
C,	DEC 0
a,	DEC 0
b,	DEC 0
c,	DEC 0
p,	DEC 0
F,	DEC 0
G,	DEC 0
H,	DEC 0
I,	DEC	0
J,	DEC	0
K,	DEC	0
neg,	DEC -1
count,	DEC 0
count1,	DEC 0
temp,	DEC 0
res,	DEC 0
valAbs,	DEC 0
area,	DEC 0
n1,		Dec 0
n2,		Dec 0
n3,		Dec 0
perimetro, DEC 0

